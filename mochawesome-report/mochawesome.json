{
  "stats": {
    "suites": 8,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2020-11-03T06:27:03.849Z",
    "end": "2020-11-03T06:27:03.893Z",
    "duration": 44,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b21f3c48-a215-44c9-8f5c-c0fc1afce3e7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 2,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.clear();\nlogsnap_1.default.disable();\n// Silence all the logging from our custom logger\n// Logger.create = sinon.stub().callsFake(() =>\n//   _.reduce(\n//     _.keys(_color),\n//     (acc: any, color) => {\n//       acc[color] = _.noop\n//       return acc\n//     },\n//     {},\n//   ),\n// )\ntry {\n    logSpy = sinon_1.default.stub(global.console, 'log').callsFake(() => lodash_1.default.noop);\n    // logsnapSpy = sinon.stub(Logger, 'create').callsFake(() => _.noop as any)\n}\ncatch (error) { }",
          "err": {},
          "uuid": "b0f48568-d369-42c8-acb4-a50b9f71ad5f",
          "parentUUID": "b21f3c48-a215-44c9-8f5c-c0fc1afce3e7",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "test_utils_1.noodlui.cleanup();",
          "err": {},
          "uuid": "54a8c53d-8e73-4f01-b27a-9b2e9c4b6b73",
          "parentUUID": "b21f3c48-a215-44c9-8f5c-c0fc1afce3e7",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var _a;\n(_a = logSpy === null || logSpy === void 0 ? void 0 : logSpy.restore) === null || _a === void 0 ? void 0 : _a.call(logSpy);\n// logsnapSpy?.restore?.()",
          "err": {},
          "uuid": "7909c1a6-6bfb-4cb2-895d-81dc1d38e78b",
          "parentUUID": "b21f3c48-a215-44c9-8f5c-c0fc1afce3e7",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "document.body.textContent = '';",
          "err": {},
          "uuid": "336f0667-107f-4307-a0c7-e00c70b92ccc",
          "parentUUID": "b21f3c48-a215-44c9-8f5c-c0fc1afce3e7",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "ba7812f3-5e5d-4ccd-a8f5-bf04f2b8271f",
          "title": "hello",
          "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\resolvers\\__tests__\\_internal\\handleList.test.ts",
          "file": "\\packages\\noodl-ui\\src\\resolvers\\__tests__\\_internal\\handleList.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "",
              "fullTitle": "hello ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// throw new Error('fsa')",
              "err": {},
              "uuid": "3573e277-5fe1-4069-9d80-fd060c5abd72",
              "parentUUID": "ba7812f3-5e5d-4ccd-a8f5-bf04f2b8271f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3573e277-5fe1-4069-9d80-fd060c5abd72"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "75585edb-897e-48d2-b5a6-6ff6dfbe71fa",
          "title": "List",
          "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
          "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should automatically add type: list if no args",
              "fullTitle": "List should automatically add type: list if no args",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const component = new List_1.default();\nchai_1.expect(component.type).to.equal('list');\nchai_1.expect(component.noodlType).to.equal('list');",
              "err": {},
              "uuid": "1f5976c6-6125-41e0-b832-f95732e61647",
              "parentUUID": "75585edb-897e-48d2-b5a6-6ff6dfbe71fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add the child to list state only if its a listItem child",
              "fullTitle": "List should add the child to list state only if its a listItem child",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const component = new List_1.default();\nconst child1 = component.createChild(new ListItem_1.default());\nconst child2 = component.createChild(new Base_1.default({ type: 'view' }));\nchai_1.expect(component.exists(child1)).to.be.true;\nchai_1.expect(component.exists(child2)).to.be.false;",
              "err": {},
              "uuid": "cb12b6aa-132b-4bcc-ade4-ab6fcb9d94c1",
              "parentUUID": "75585edb-897e-48d2-b5a6-6ff6dfbe71fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should still add the child to the base state if its not a listItem child",
              "fullTitle": "List should still add the child to the base state if its not a listItem child",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const component = new List_1.default();\nconst child = component.createChild(new Base_1.default({ type: 'view' }));\nchai_1.expect(component.has(child)).to.be.false;\nchai_1.expect(component.child()).to.equal(child);",
              "err": {},
              "uuid": "6260aa2f-4c36-4f10-93f7-358a64071069",
              "parentUUID": "75585edb-897e-48d2-b5a6-6ff6dfbe71fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d5c94029-c52f-4711-a164-3fcc064c54f1",
              "title": "initiation",
              "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have initiated the listId, listObject and iteratorVar",
                  "fullTitle": "List initiation should have initiated the listId, listObject and iteratorVar",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const args = { iteratorVar: 'colorful', listObject: ['fruits'] };\nconst noodlComponent = mockData_1.mock.raw.getNOODLList(args);\nconst component = new List_1.default(noodlComponent);\nchai_1.expect(component.listId).to.exist;\nchai_1.expect(component.iteratorVar).to.equal(args.iteratorVar);\nchai_1.expect(component.getData()).to.equal(args.listObject);",
                  "err": {},
                  "uuid": "02291733-ed2a-41f5-b89b-4513b5152445",
                  "parentUUID": "d5c94029-c52f-4711-a164-3fcc064c54f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have initiated the blueprint using the raw noodl list item component",
                  "fullTitle": "List initiation should have initiated the blueprint using the raw noodl list item component",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const noodlComponent = mockData_1.mock.raw.getNOODLList();\nconst { iteratorVar } = noodlComponent;\nconst component = new List_1.default(noodlComponent);\nconst blueprint = component.getBlueprint();\nchai_1.expect(blueprint).to.have.property('listId', component.listId);\nchai_1.expect(blueprint).to.have.property('iteratorVar', iteratorVar);",
                  "err": {},
                  "uuid": "99a206d5-c57b-44ef-982e-d552a18c4ed5",
                  "parentUUID": "d5c94029-c52f-4711-a164-3fcc064c54f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02291733-ed2a-41f5-b89b-4513b5152445",
                "99a206d5-c57b-44ef-982e-d552a18c4ed5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "75588d90-8e27-481f-bf6a-c1b4203154f9",
              "title": "blueprint",
              "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should attach listId and iteratorVar deeply to all children in its family tree",
                  "fullTitle": "List blueprint should attach listId and iteratorVar deeply to all children in its family tree",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const noodlComponent = mockData_1.mock.raw.getNOODLList();\nconst component = new List_1.default(noodlComponent);\nconst blueprint = component.getBlueprint();\nlet count = 0;\nconst encounters = [];\nnoodl_1.forEachDeepChildren(blueprint, (child) => {\n    chai_1.expect(child.listId).to.equal(component.listId);\n    count++;\n    encounters.push(child);\n});\nchai_1.expect(encounters.length).to.equal(count);\nlodash_1.default.forEach(encounters, (enc) => {\n    chai_1.expect(enc.listId).to.equal(blueprint.listId);\n});",
                  "err": {},
                  "uuid": "ddd96587-a90a-4285-a7d5-1a5bc5d9a652",
                  "parentUUID": "75588d90-8e27-481f-bf6a-c1b4203154f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ddd96587-a90a-4285-a7d5-1a5bc5d9a652"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9aceeaa1-3fca-4855-b380-61bea6154fb5",
              "title": "addDataObject",
              "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit add.data.object with the correct args",
                  "fullTitle": "List addDataObject should emit add.data.object with the correct args",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const component = new List_1.default();\nconst spy = sinon_1.default.spy();\nconst dataObject = { firstName: 'Mike', lastName: 'Rodriguez' };\ncomponent.on(constants_1.event.component.list.ADD_DATA_OBJECT, spy);\ncomponent.addDataObject(dataObject);\nconst args = spy.firstCall.args[0];\nchai_1.expect(args).to.have.property('index');\nchai_1.expect(args).to.have.property('dataObject');\nchai_1.expect(args).to.have.property('succeeded');",
                  "err": {},
                  "uuid": "157b1438-0de2-4188-9800-31b4a76d7507",
                  "parentUUID": "9aceeaa1-3fca-4855-b380-61bea6154fb5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "157b1438-0de2-4188-9800-31b4a76d7507"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d38dc280-f4bf-47d2-8f2c-4d4743b491c1",
              "title": "deleteDataObject",
              "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit delete.data.object with the correct args",
                  "fullTitle": "List deleteDataObject should emit delete.data.object with the correct args",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const component = new List_1.default();\nconst dataObject = { firstName: 'Mike', lastName: 'Rodriguez' };\ncomponent.addDataObject(dataObject);\nconst spy = sinon_1.default.spy();\ncomponent.on(constants_1.event.component.list.DELETE_DATA_OBJECT, spy);\ncomponent.removeDataObject(0);\nconst args = spy.firstCall.args[0];\nchai_1.expect(args).to.have.property('index');\nchai_1.expect(args).to.have.property('dataObject');\nchai_1.expect(args).to.have.property('succeeded');",
                  "err": {},
                  "uuid": "7420d4fc-3f78-4a10-9657-11d824ffc76a",
                  "parentUUID": "d38dc280-f4bf-47d2-8f2c-4d4743b491c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7420d4fc-3f78-4a10-9657-11d824ffc76a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9c689f2a-62c9-43da-8747-303c9c3a0b02",
              "title": "getDataObject",
              "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit retrieve.data.object with the correct args",
                  "fullTitle": "List getDataObject should emit retrieve.data.object with the correct args",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const component = new List_1.default();\nconst dataObject = { firstName: 'Mike', lastName: 'Rodriguez' };\ncomponent.addDataObject(dataObject);\nconst spy = sinon_1.default.spy();\ncomponent.on(constants_1.event.component.list.RETRIEVE_DATA_OBJECT, spy);\ncomponent.getDataObject(0);\nconst args = spy.firstCall.args[0];\nchai_1.expect(args).to.have.property('index');\nchai_1.expect(args).to.have.property('dataObject');\nchai_1.expect(args).to.have.property('succeeded');",
                  "err": {},
                  "uuid": "01ea674d-ed0e-4bdd-9826-0dae1cab8e60",
                  "parentUUID": "9c689f2a-62c9-43da-8747-303c9c3a0b02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01ea674d-ed0e-4bdd-9826-0dae1cab8e60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa4c2978-90c5-4b68-b727-71eff7b06639",
              "title": "updateDataObject",
              "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update.data.object with the correct args",
                  "fullTitle": "List updateDataObject should emit update.data.object with the correct args",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const component = new List_1.default();\nconst dataObject = { firstName: 'Mike', lastName: 'Rodriguez' };\ncomponent.addDataObject(dataObject);\nconst spy = sinon_1.default.spy();\ncomponent.on(constants_1.event.component.list.UPDATE_DATA_OBJECT, spy);\ncomponent.setDataObject(0, { ...dataObject, email: 'chris@gmail.com' });\nconst args = spy.firstCall.args[0];\nchai_1.expect(args).to.have.property('index');\nchai_1.expect(args).to.have.property('dataObject');\nchai_1.expect(args.dataObject).to.have.property('email', 'chris@gmail.com');\nchai_1.expect(args).to.have.property('succeeded');",
                  "err": {},
                  "uuid": "dbfcd978-8975-4fb4-8d57-c0ed2be2253a",
                  "parentUUID": "fa4c2978-90c5-4b68-b727-71eff7b06639",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbfcd978-8975-4fb4-8d57-c0ed2be2253a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "1f5976c6-6125-41e0-b832-f95732e61647",
            "cb12b6aa-132b-4bcc-ade4-ab6fcb9d94c1",
            "6260aa2f-4c36-4f10-93f7-358a64071069"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}