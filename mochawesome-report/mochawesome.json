{
  "stats": {
    "suites": 6,
    "tests": 15,
    "passes": 7,
    "pending": 8,
    "failures": 0,
    "start": "2020-11-02T05:20:18.844Z",
    "end": "2020-11-02T05:20:18.903Z",
    "duration": 59,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 53.333333333333336,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4af815d1-b3d9-4666-8d9b-e6dc50ace92a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 3,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.clear();\nlogsnap_1.default.disable();\n// Silence all the logging from our custom logger\n// Logger.create = sinon.stub().callsFake(() =>\n//   _.reduce(\n//     _.keys(_color),\n//     (acc: any, color) => {\n//       acc[color] = _.noop\n//       return acc\n//     },\n//     {},\n//   ),\n// )\ntry {\n    logSpy = sinon_1.default.stub(global.console, 'log').callsFake(() => lodash_1.default.noop);\n    // logsnapSpy = sinon.stub(Logger, 'create').callsFake(() => _.noop as any)\n}\ncatch (error) { }",
          "err": {},
          "uuid": "59acd932-3bf8-47c7-8175-18c632105df3",
          "parentUUID": "4af815d1-b3d9-4666-8d9b-e6dc50ace92a",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "test_utils_1.noodlui.cleanup();",
          "err": {},
          "uuid": "6c8d67c0-e6fe-4488-b1a2-3b3c3cd94fd6",
          "parentUUID": "4af815d1-b3d9-4666-8d9b-e6dc50ace92a",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var _a;\n(_a = logSpy === null || logSpy === void 0 ? void 0 : logSpy.restore) === null || _a === void 0 ? void 0 : _a.call(logSpy);\n// logsnapSpy?.restore?.()",
          "err": {},
          "uuid": "26a76e8b-af64-4bbe-99fa-609b1eeea2a0",
          "parentUUID": "4af815d1-b3d9-4666-8d9b-e6dc50ace92a",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "document.body.textContent = '';",
          "err": {},
          "uuid": "c400f988-3559-462a-ae9d-f28f20a142ce",
          "parentUUID": "4af815d1-b3d9-4666-8d9b-e6dc50ace92a",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "1cfc84d1-fd2f-4ac1-90a8-5e654b5dc885",
          "title": "hello",
          "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\resolvers\\__tests__\\_internal\\handleList.test.ts",
          "file": "\\packages\\noodl-ui\\src\\resolvers\\__tests__\\_internal\\handleList.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "",
              "fullTitle": "hello ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// throw new Error('fsa')",
              "err": {},
              "uuid": "a1ce261f-8e7c-43d1-ba45-765abba9ba88",
              "parentUUID": "1cfc84d1-fd2f-4ac1-90a8-5e654b5dc885",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a1ce261f-8e7c-43d1-ba45-765abba9ba88"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3d80ce93-6fce-48af-a913-ca036a90e614",
          "title": "List",
          "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
          "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should automatically add type: list if no args",
              "fullTitle": "List should automatically add type: list if no args",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const component = new List_1.default();\nchai_1.expect(component.type).to.equal('list');\nchai_1.expect(component.noodlType).to.equal('list');",
              "err": {},
              "uuid": "87c9e3d7-8a5e-404b-b9df-6682909d9489",
              "parentUUID": "3d80ce93-6fce-48af-a913-ca036a90e614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add the child to list state only if its a listItem child",
              "fullTitle": "List should add the child to list state only if its a listItem child",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const component = new List_1.default();\nconst child1 = component.createChild(new ListItem_1.default());\nconst child2 = component.createChild(new Base_1.default({ type: 'view' }));\nchai_1.expect(component.exists(child1)).to.be.true;\nchai_1.expect(component.exists(child2)).to.be.false;",
              "err": {},
              "uuid": "7b918f13-9140-4cf3-97fc-1050f9abfeb9",
              "parentUUID": "3d80ce93-6fce-48af-a913-ca036a90e614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should still add the child to the base state if its not a listItem child",
              "fullTitle": "List should still add the child to the base state if its not a listItem child",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const component = new List_1.default();\nconst child = component.createChild(new Base_1.default({ type: 'view' }));\nchai_1.expect(component.has(child)).to.be.false;\nchai_1.expect(component.child()).to.equal(child);",
              "err": {},
              "uuid": "eea194f7-8329-40e3-aeb7-19a8107b1e25",
              "parentUUID": "3d80ce93-6fce-48af-a913-ca036a90e614",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c2542a9a-78d8-4da8-a977-19684c9e4f60",
              "title": "initiation",
              "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have initiated the listId, listObject and iteratorVar",
                  "fullTitle": "List initiation should have initiated the listId, listObject and iteratorVar",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const args = { iteratorVar: 'colorful', listObject: ['fruits'] };\nconst noodlComponent = mockData_1.mock.raw.getNOODLList(args);\nconst component = new List_1.default(noodlComponent);\nchai_1.expect(component.listId).to.exist;\nchai_1.expect(component.iteratorVar).to.equal(args.iteratorVar);\nchai_1.expect(component.getData()).to.equal(args.listObject);",
                  "err": {},
                  "uuid": "35376b9f-6ea5-4780-865e-892a8ff330ea",
                  "parentUUID": "c2542a9a-78d8-4da8-a977-19684c9e4f60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have initiated the blueprint using the raw noodl list item component",
                  "fullTitle": "List initiation should have initiated the blueprint using the raw noodl list item component",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const noodlComponent = mockData_1.mock.raw.getNOODLList();\nconst { iteratorVar } = noodlComponent;\nconst component = new List_1.default(noodlComponent);\nconst blueprint = component.getBlueprint();\nchai_1.expect(blueprint).to.have.property('listId', component.listId);\nchai_1.expect(blueprint).to.have.property('iteratorVar', iteratorVar);",
                  "err": {},
                  "uuid": "250c557e-af0c-4f9d-80de-1d8e3d612ac3",
                  "parentUUID": "c2542a9a-78d8-4da8-a977-19684c9e4f60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35376b9f-6ea5-4780-865e-892a8ff330ea",
                "250c557e-af0c-4f9d-80de-1d8e3d612ac3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9cb163af-11d0-4563-8455-89ae8678e87e",
              "title": "blueprint",
              "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should attach listId and iteratorVar deeply to all children in its family tree",
                  "fullTitle": "List blueprint should attach listId and iteratorVar deeply to all children in its family tree",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const noodlComponent = mockData_1.mock.raw.getNOODLList();\nconst component = new List_1.default(noodlComponent);\nconst blueprint = component.getBlueprint();\nlet count = 0;\nconst encounters = [];\nnoodl_1.forEachDeepChildren(blueprint, (child) => {\n    chai_1.expect(child.listId).to.equal(component.listId);\n    count++;\n    encounters.push(child);\n});\nchai_1.expect(encounters.length).to.equal(count);\nlodash_1.default.forEach(encounters, (enc) => {\n    chai_1.expect(enc.listId).to.equal(blueprint.listId);\n});",
                  "err": {},
                  "uuid": "98123dbc-57e7-4970-b88b-a792aad294b2",
                  "parentUUID": "9cb163af-11d0-4563-8455-89ae8678e87e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98123dbc-57e7-4970-b88b-a792aad294b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1457d138-037c-404e-8694-32f6997119c9",
              "title": "retrieving dataObjects from list item children",
              "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to retrieve a data object for a list item using the child instance",
                  "fullTitle": "List retrieving dataObjects from list item children should be able to retrieve a data object for a list item using the child instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "50ed1176-0aab-4e95-b770-082157acef36",
                  "parentUUID": "1457d138-037c-404e-8694-32f6997119c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to retrieve a data object for a list item using the child id",
                  "fullTitle": "List retrieving dataObjects from list item children should be able to retrieve a data object for a list item using the child id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d06e07bc-bfe4-4097-8363-194e15d50066",
                  "parentUUID": "1457d138-037c-404e-8694-32f6997119c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to retrieve a data object for a list item using the index position",
                  "fullTitle": "List retrieving dataObjects from list item children should be able to retrieve a data object for a list item using the index position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0e451d36-c9b4-41c8-84dd-11dec209699a",
                  "parentUUID": "1457d138-037c-404e-8694-32f6997119c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return dataObjects from list item children",
                  "fullTitle": "List retrieving dataObjects from list item children should return dataObjects from list item children",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3c6ccffa-a073-4a9c-8536-e4fff92b9985",
                  "parentUUID": "1457d138-037c-404e-8694-32f6997119c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "50ed1176-0aab-4e95-b770-082157acef36",
                "d06e07bc-bfe4-4097-8363-194e15d50066",
                "0e451d36-c9b4-41c8-84dd-11dec209699a",
                "3c6ccffa-a073-4a9c-8536-e4fff92b9985"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "08edd2e1-51cf-4250-8a29-80b902934252",
              "title": "setting listObject",
              "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "file": "\\packages\\noodl-ui\\src\\__tests__\\List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have a data object assign to every child ",
                  "fullTitle": "List setting listObject should have a data object assign to every child ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "249d1d40-b188-4a81-86dc-f69f07ae5380",
                  "parentUUID": "08edd2e1-51cf-4250-8a29-80b902934252",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have created list item components for additional data objects",
                  "fullTitle": "List setting listObject should have created list item components for additional data objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f3e2ed30-1907-4fc7-b514-31f8955fe3e0",
                  "parentUUID": "08edd2e1-51cf-4250-8a29-80b902934252",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have removed list item components to match the length of the new listObject",
                  "fullTitle": "List setting listObject should have removed list item components to match the length of the new listObject",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a97f8055-7ca0-438b-91e2-c11eb68d687d",
                  "parentUUID": "08edd2e1-51cf-4250-8a29-80b902934252",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should refresh all of its children's data object to align the order of the list data",
                  "fullTitle": "List setting listObject should refresh all of its children's data object to align the order of the list data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "caf4c55f-e25c-4a3b-b2c5-c6c379bf5096",
                  "parentUUID": "08edd2e1-51cf-4250-8a29-80b902934252",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "249d1d40-b188-4a81-86dc-f69f07ae5380",
                "f3e2ed30-1907-4fc7-b514-31f8955fe3e0",
                "a97f8055-7ca0-438b-91e2-c11eb68d687d",
                "caf4c55f-e25c-4a3b-b2c5-c6c379bf5096"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "87c9e3d7-8a5e-404b-b9df-6682909d9489",
            "7b918f13-9140-4cf3-97fc-1050f9abfeb9",
            "eea194f7-8329-40e3-aeb7-19a8107b1e25"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}