{
  "stats": {
    "suites": 6,
    "tests": 12,
    "passes": 9,
    "pending": 1,
    "failures": 2,
    "start": "2020-11-02T19:06:50.863Z",
    "end": "2020-11-02T19:06:50.902Z",
    "duration": 39,
    "testsRegistered": 12,
    "passPercent": 81.81818181818183,
    "pendingPercent": 8.333333333333332,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "86ad3d36-6ad2-497a-9571-942b54ab78b1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.clear();\nlogsnap_1.default.disable();\n// Silence all the logging from our custom logger\n// Logger.create = sinon.stub().callsFake(() =>\n//   _.reduce(\n//     _.keys(_color),\n//     (acc: any, color) => {\n//       acc[color] = _.noop\n//       return acc\n//     },\n//     {},\n//   ),\n// )\ntry {\n    logSpy = sinon_1.default.stub(global.console, 'log').callsFake(() => lodash_1.default.noop);\n    // logsnapSpy = sinon.stub(Logger, 'create').callsFake(() => _.noop as any)\n}\ncatch (error) { }",
          "err": {},
          "uuid": "3385cb50-9349-4846-89d5-56c3c810727d",
          "parentUUID": "86ad3d36-6ad2-497a-9571-942b54ab78b1",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "test_utils_1.noodlui.cleanup();",
          "err": {},
          "uuid": "6038e384-08e1-437a-aba2-7f1630cbdfca",
          "parentUUID": "86ad3d36-6ad2-497a-9571-942b54ab78b1",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "noodluidom = new noodl_ui_dom_1.default();",
          "err": {},
          "uuid": "36597461-bdae-4aed-bf02-6a99bf12f597",
          "parentUUID": "86ad3d36-6ad2-497a-9571-942b54ab78b1",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var _a;\n(_a = logSpy === null || logSpy === void 0 ? void 0 : logSpy.restore) === null || _a === void 0 ? void 0 : _a.call(logSpy);\n// logsnapSpy?.restore?.()",
          "err": {},
          "uuid": "b7656853-1e69-4def-86d1-9b6142ab5821",
          "parentUUID": "86ad3d36-6ad2-497a-9571-942b54ab78b1",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "document.body.textContent = '';",
          "err": {},
          "uuid": "ad5b1a8b-ac7d-4eef-8fde-5e28ac538246",
          "parentUUID": "86ad3d36-6ad2-497a-9571-942b54ab78b1",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "6db6b3d5-6a37-4bc0-a91c-ac04cb1bf21d",
          "title": "noodl-ui-dom",
          "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
          "file": "/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add the func to the callbacks list",
              "fullTitle": "noodl-ui-dom should add the func to the callbacks list",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spy = sinon_1.default.spy();\nnoodluidom.on('create.button', spy);\nconst callbacksList = noodluidom.getCallbacks('create.button');\nchai_1.expect(callbacksList).to.be.an('array');\nchai_1.expect(callbacksList).to.have.members([spy]);",
              "err": {},
              "uuid": "5f7588d3-e5c2-4567-a509-4c614bfe78f8",
              "parentUUID": "6db6b3d5-6a37-4bc0-a91c-ac04cb1bf21d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the func from the callbacks list",
              "fullTitle": "noodl-ui-dom should remove the func from the callbacks list",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spy = sinon_1.default.spy();\nnoodluidom.on('create.button', spy);\nlet callbacksList = noodluidom.getCallbacks('create.button');\nchai_1.expect(callbacksList).to.have.members([spy]);\nnoodluidom.off('create.button', spy);\ncallbacksList = noodluidom.getCallbacks('create.button');\nchai_1.expect(callbacksList).to.be.an('array');\nchai_1.expect(callbacksList).not.to.include.members([spy]);",
              "err": {},
              "uuid": "14f4f481-478c-4a5b-9f01-d0935bf0b315",
              "parentUUID": "6db6b3d5-6a37-4bc0-a91c-ac04cb1bf21d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit events",
              "fullTitle": "noodl-ui-dom should emit events",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spy = sinon_1.default.spy();\nnoodluidom.on('create.label', spy);\nchai_1.expect(spy.called).to.be.false;\n// @ts-expect-error\nnoodluidom.emit('create.label');\nchai_1.expect(spy.called).to.be.true;",
              "err": {},
              "uuid": "73e9416a-f202-4e6f-9764-b1ce9217dbc8",
              "parentUUID": "6db6b3d5-6a37-4bc0-a91c-ac04cb1bf21d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c81548a6-a182-4387-b590-3ef8bf7c2270",
              "title": "calling the appropriate event",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
              "file": "/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"calling the appropriate event\"",
                  "fullTitle": "noodl-ui-dom calling the appropriate event \"before each\" hook in \"calling the appropriate event\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fn1 = sinon_1.default.spy();\nfn2 = sinon_1.default.spy();\nfn3 = sinon_1.default.spy();\nnoodluidom.on('create.button', fn1);\nnoodluidom.on('create.image', fn2);\nnoodluidom.on('create.button', fn3);",
                  "err": {},
                  "uuid": "e763f326-45e7-4c7f-8f16-c8622eb3039e",
                  "parentUUID": "c81548a6-a182-4387-b590-3ef8bf7c2270",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should call callbacks that were subscribed",
                  "fullTitle": "noodl-ui-dom calling the appropriate event should call callbacks that were subscribed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4735bf5c-4298-43a1-a9bf-41d663560c66",
                  "parentUUID": "c81548a6-a182-4387-b590-3ef8bf7c2270",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not call callbacks that were not subscribed",
                  "fullTitle": "noodl-ui-dom calling the appropriate event should not call callbacks that were not subscribed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "noodluidom.parse(test_utils_1.noodl.resolveComponents({\n    id: 'myid123',\n    type: 'label',\n    noodlType: 'label',\n    text: 'hello',\n}));\nchai_1.expect(fn1.called).to.be.false;\nchai_1.expect(fn2.called).to.be.false;\nchai_1.expect(fn3.called).to.be.false;",
                  "err": {},
                  "uuid": "c618667b-a22a-42a7-9de8-e39b26b1ccb9",
                  "parentUUID": "c81548a6-a182-4387-b590-3ef8bf7c2270",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c618667b-a22a-42a7-9de8-e39b26b1ccb9"
              ],
              "failures": [],
              "pending": [
                "4735bf5c-4298-43a1-a9bf-41d663560c66"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3596427e-50d0-478b-877d-d19d8ecde3b8",
              "title": "isValidAttribute",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
              "file": "/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for possible assigned attributes on the dom node",
                  "fullTitle": "noodl-ui-dom isValidAttribute should return true for possible assigned attributes on the dom node",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(noodluidom.isValidAttr('div', 'style')).to.be.true;\nchai_1.expect(noodluidom.isValidAttr('div', 'setAttribute')).to.be.true;\nchai_1.expect(noodluidom.isValidAttr('div', 'id')).to.be.true;\nchai_1.expect(noodluidom.isValidAttr('div', 'dataset')).to.be.true;",
                  "err": {},
                  "uuid": "159a0594-0c96-4244-b0e2-04267c97fa1c",
                  "parentUUID": "3596427e-50d0-478b-877d-d19d8ecde3b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for all of these",
                  "fullTitle": "noodl-ui-dom isValidAttribute should return false for all of these",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(noodluidom.isValidAttr('div', 'abc')).to.be.false;\nchai_1.expect(noodluidom.isValidAttr('div', 'value')).to.be.false;\nchai_1.expect(noodluidom.isValidAttr('div', 'options')).to.be.false;",
                  "err": {},
                  "uuid": "d1941872-83f8-4c10-96f8-0ac9833fc6b4",
                  "parentUUID": "3596427e-50d0-478b-877d-d19d8ecde3b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for all of these",
                  "fullTitle": "noodl-ui-dom isValidAttribute should return true for all of these",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(noodluidom.isValidAttr('textarea', 'value')).to.be.true;\nchai_1.expect(noodluidom.isValidAttr('input', 'value')).to.be.true;\nchai_1.expect(noodluidom.isValidAttr('select', 'value')).to.be.true;\nchai_1.expect(noodluidom.isValidAttr('input', 'placeholder')).to.be.true;\nchai_1.expect(noodluidom.isValidAttr('input', 'required')).to.be.true;",
                  "err": {},
                  "uuid": "5cb448b6-10bf-4d0d-97bb-a4c348770ebd",
                  "parentUUID": "3596427e-50d0-478b-877d-d19d8ecde3b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for all of these",
                  "fullTitle": "noodl-ui-dom isValidAttribute should return false for all of these",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(noodluidom.isValidAttr('select', 'abc')).to.be.false;\nchai_1.expect(noodluidom.isValidAttr('select', 'rows')).to.be.false;\nchai_1.expect(noodluidom.isValidAttr('input', 'rows')).to.be.false;\nchai_1.expect(noodluidom.isValidAttr('textarea', 'options')).to.be.false;",
                  "err": {},
                  "uuid": "4ed58287-8a2d-4c55-9bf9-e431722a014a",
                  "parentUUID": "3596427e-50d0-478b-877d-d19d8ecde3b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "159a0594-0c96-4244-b0e2-04267c97fa1c",
                "d1941872-83f8-4c10-96f8-0ac9833fc6b4",
                "5cb448b6-10bf-4d0d-97bb-a4c348770ebd",
                "4ed58287-8a2d-4c55-9bf9-e431722a014a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa390b73-131b-4a8e-a217-ceea6ebfb27e",
              "title": "parse",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
              "file": "/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the expected node",
                  "fullTitle": "noodl-ui-dom parse should return the expected node",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const label = test_utils_1.noodl.resolveComponents({\n    type: 'label',\n    text: 'Title',\n    style: {\n        color: '0xffffffff',\n        width: '0.6',\n        height: '0.04',\n        fontSize: '18',\n        fontStyle: 'bold',\n    },\n});\nnoodluidom.on('create.label', (node, props) => {\n    if (node)\n        node.innerHTML = `${props.children}`;\n});\nconst node = noodluidom.parse(label);\nif (node)\n    document.body.appendChild(node);\nchai_1.expect(node).to.be.instanceOf(HTMLLabelElement);\nchai_1.expect(dom_2.screen.getByText('Title'));",
                  "err": {
                    "message": "TestingLibraryElementError: Unable to find an element with the text: Title. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.\n\n<body>\n  <label>\n    undefined\n  </label>\n</body>",
                    "estack": "TestingLibraryElementError: Unable to find an element with the text: Title. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.\n\n<body>\n  <label>\n    undefined\n  </label>\n</body>\n    at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:37:19)\n    at /Users/christ/aitmed-noodl-web/node_modules/@testing-library/dom/dist/query-helpers.js:90:38\n    at /Users/christ/aitmed-noodl-web/node_modules/@testing-library/dom/dist/query-helpers.js:62:17\n    at /Users/christ/aitmed-noodl-web/node_modules/@testing-library/dom/dist/query-helpers.js:106:19\n    at Context.<anonymous> (packages/noodl-ui-dom/src/noodl-ui-dom.test.ts:123:40)\n    at processImmediate (internal/timers.js:439:21)",
                    "diff": null
                  },
                  "uuid": "df6068c3-fa28-430f-84b9-c33c6f95055e",
                  "parentUUID": "aa390b73-131b-4a8e-a217-ceea6ebfb27e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "c844b0d7-13ee-4c90-b028-8541f3c257f0",
                  "title": "recursing children",
                  "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
                  "file": "/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"recursing children\"",
                      "fullTitle": "noodl-ui-dom parse recursing children \"before each\" hook in \"recursing children\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "component = {\n    type: 'div',\n    noodlType: 'view',\n    id: 'abc',\n    style: {\n        left: '0',\n    },\n    children: [\n        {\n            type: 'div',\n            noodlType: 'view',\n            text: 'Back',\n            style: {},\n            id: 'label123',\n            children: [\n                {\n                    type: 'ul',\n                    noodlType: 'list',\n                    id: 'list123',\n                    contentType: 'listObject',\n                    listObject: [],\n                    iteratorVar: 'itemObject',\n                    style: {},\n                    children: [\n                        {\n                            type: 'label',\n                            noodlType: 'label',\n                            style: {},\n                            id: 'label1223',\n                            children: labelText,\n                            text: labelText,\n                        },\n                    ],\n                },\n            ],\n        },\n    ],\n};",
                      "err": {},
                      "uuid": "cb56173a-18fe-4459-bebd-0ba0f1439c28",
                      "parentUUID": "c844b0d7-13ee-4c90-b028-8541f3c257f0",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should append nested children as far down as possible",
                      "fullTitle": "noodl-ui-dom parse recursing children should append nested children as far down as possible",
                      "timedOut": false,
                      "duration": 20,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "noodluidom.on('create.label', (node, inst) => {\n    if (node)\n        node.innerHTML = inst.get('text');\n});\nnoodluidom.parse(test_utils_1.noodl.resolveComponents(component));\nconsole.info(dom_1.prettyDOM());\nchai_1.expect(dom_2.screen.getByText(labelText));",
                      "err": {
                        "message": "TypeError: inst.get is not a function",
                        "estack": "TypeError: inst.get is not a function\n    at /Users/christ/aitmed-noodl-web/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts:171:45\n    at /Users/christ/aitmed-noodl-web/packages/noodl-ui-dom/src/noodl-ui-dom.ts:141:45\n    at Array.forEach (<anonymous>)\n    at NOODLUIDOM.emit (packages/noodl-ui-dom/src/noodl-ui-dom.ts:141:23)\n    at NOODLUIDOM.parse (packages/noodl-ui-dom/src/noodl-ui-dom.ts:94:23)\n    at /Users/christ/aitmed-noodl-web/packages/noodl-ui-dom/src/noodl-ui-dom.ts:100:10\n    at Array.forEach (<anonymous>)\n    at NOODLUIDOM.parse (packages/noodl-ui-dom/src/noodl-ui-dom.ts:99:14)\n    at /Users/christ/aitmed-noodl-web/packages/noodl-ui-dom/src/noodl-ui-dom.ts:100:10\n    at Array.forEach (<anonymous>)\n    at NOODLUIDOM.parse (packages/noodl-ui-dom/src/noodl-ui-dom.ts:99:14)\n    at Context.<anonymous> (packages/noodl-ui-dom/src/noodl-ui-dom.test.ts:173:16)\n    at processImmediate (internal/timers.js:439:21)",
                        "diff": null
                      },
                      "uuid": "3c446ae9-b05f-4174-97bb-a13c8269155b",
                      "parentUUID": "c844b0d7-13ee-4c90-b028-8541f3c257f0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "3c446ae9-b05f-4174-97bb-a13c8269155b"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 20,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [
                "df6068c3-fa28-430f-84b9-c33c6f95055e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "274f4541-6ee5-4d2a-9c0f-155072805360",
              "title": "noodlType: plugin",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
              "file": "/packages/noodl-ui-dom/src/noodl-ui-dom.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should receive null as the \"DOM node\" in the callback",
                  "fullTitle": "noodl-ui-dom noodlType: plugin should receive null as the \"DOM node\" in the callback",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const spy = sinon_1.default.spy();\nconst component = {\n    id: '123',\n    type: 'plugin',\n    noodlType: 'plugin',\n    path: 'https://what.com/what.jpg',\n};\nnoodluidom.on('create.plugin', spy);\nnoodluidom.parse(test_utils_1.noodl.resolveComponents(component), document.body);\nchai_1.expect(spy.firstCall.args[0]).to.be.null;",
                  "err": {},
                  "uuid": "e2d37421-8157-46c6-8140-a831e991c3dd",
                  "parentUUID": "274f4541-6ee5-4d2a-9c0f-155072805360",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2d37421-8157-46c6-8140-a831e991c3dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "5f7588d3-e5c2-4567-a509-4c614bfe78f8",
            "14f4f481-478c-4a5b-9f01-d0935bf0b315",
            "73e9416a-f202-4e6f-9764-b1ce9217dbc8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}