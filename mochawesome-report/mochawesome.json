{
  "stats": {
    "suites": 6,
    "tests": 15,
    "passes": 5,
    "pending": 10,
    "failures": 0,
    "start": "2020-11-02T04:29:05.761Z",
    "end": "2020-11-02T04:29:05.769Z",
    "duration": 8,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 66.66666666666666,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e7850b44-a874-4cab-a4a0-a40ff03772df",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.clear();\nlogsnap_1.default.disable();\n// Silence all the logging from our custom logger\n// Logger.create = sinon.stub().callsFake(() =>\n//   _.reduce(\n//     _.keys(_color),\n//     (acc: any, color) => {\n//       acc[color] = _.noop\n//       return acc\n//     },\n//     {},\n//   ),\n// )\ntry {\n    logSpy = sinon_1.default.stub(global.console, 'log').callsFake(() => lodash_1.default.noop);\n    // logsnapSpy = sinon.stub(Logger, 'create').callsFake(() => _.noop as any)\n}\ncatch (error) { }",
          "err": {},
          "uuid": "d2aab74a-58f3-43a0-acb8-98bd6da4f5f4",
          "parentUUID": "e7850b44-a874-4cab-a4a0-a40ff03772df",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "test_utils_1.noodlui.cleanup();",
          "err": {},
          "uuid": "9f124953-906a-4b35-afdc-7fe8c5e3aac1",
          "parentUUID": "e7850b44-a874-4cab-a4a0-a40ff03772df",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var _a;\n(_a = logSpy === null || logSpy === void 0 ? void 0 : logSpy.restore) === null || _a === void 0 ? void 0 : _a.call(logSpy);\n// logsnapSpy?.restore?.()",
          "err": {},
          "uuid": "bc835271-548e-4ddb-b6a9-024d6f910b2b",
          "parentUUID": "e7850b44-a874-4cab-a4a0-a40ff03772df",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "document.body.textContent = '';",
          "err": {},
          "uuid": "370dc181-bcfb-4227-b4bd-2fef183213d8",
          "parentUUID": "e7850b44-a874-4cab-a4a0-a40ff03772df",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "db9f5641-aeba-4548-a38e-90a012a530f7",
          "title": "hello",
          "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/resolvers/__tests__/_internal/handleList.test.ts",
          "file": "/packages/noodl-ui/src/resolvers/__tests__/_internal/handleList.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "",
              "fullTitle": "hello ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// throw new Error('fsa')",
              "err": {},
              "uuid": "5a871cd4-860f-4ed0-be26-b33b0c69e76b",
              "parentUUID": "db9f5641-aeba-4548-a38e-90a012a530f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a871cd4-860f-4ed0-be26-b33b0c69e76b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "27d37f03-0c36-4ec6-aac0-e36ea0a2753d",
          "title": "List",
          "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/List.test.ts",
          "file": "/packages/noodl-ui/src/__tests__/List.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should automatically add type: list if no args",
              "fullTitle": "List should automatically add type: list if no args",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const component = new List_1.default();\nchai_1.expect(component.type).to.equal('list');\nchai_1.expect(component.noodlType).to.equal('list');",
              "err": {},
              "uuid": "a6581923-c150-4d6a-9dea-eb86304e14f7",
              "parentUUID": "27d37f03-0c36-4ec6-aac0-e36ea0a2753d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add the child to list state only if its a listItem child",
              "fullTitle": "List should add the child to list state only if its a listItem child",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3ff28ba4-a29a-4d91-bf2c-411c43e992b8",
              "parentUUID": "27d37f03-0c36-4ec6-aac0-e36ea0a2753d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should still add the child to the base state if its not a listItem child",
              "fullTitle": "List should still add the child to the base state if its not a listItem child",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5b0eb8e8-157c-4195-83e0-8feda523f147",
              "parentUUID": "27d37f03-0c36-4ec6-aac0-e36ea0a2753d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "6df0fa6c-c81a-49d0-b87f-bebe48f3c0fd",
              "title": "initiation",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/List.test.ts",
              "file": "/packages/noodl-ui/src/__tests__/List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have initiated the listId, listObject and iteratorVar",
                  "fullTitle": "List initiation should have initiated the listId, listObject and iteratorVar",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const args = { iteratorVar: 'colorful', listObject: ['fruits'] };\nconst noodlComponent = mockData_1.mock.raw.getNOODLList(args);\nconst component = new List_1.default(noodlComponent);\nchai_1.expect(component.listId).to.exist;\nchai_1.expect(component.iteratorVar).to.equal(args.iteratorVar);\nchai_1.expect(component.getData()).to.equal(args.listObject);",
                  "err": {},
                  "uuid": "55c06ef2-c946-45bb-9edc-5a0ad5e3aff3",
                  "parentUUID": "6df0fa6c-c81a-49d0-b87f-bebe48f3c0fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have initiated the blueprint using the raw noodl list item component",
                  "fullTitle": "List initiation should have initiated the blueprint using the raw noodl list item component",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const noodlComponent = mockData_1.mock.raw.getNOODLList();\nconst { iteratorVar } = noodlComponent;\nconst component = new List_1.default(noodlComponent);\nconst blueprint = component.getBlueprint();\nchai_1.expect(blueprint).to.have.property('listId', component.listId);\nchai_1.expect(blueprint).to.have.property('iteratorVar', iteratorVar);",
                  "err": {},
                  "uuid": "a5600ebe-66dc-4fcd-b0a1-12c51c41b47a",
                  "parentUUID": "6df0fa6c-c81a-49d0-b87f-bebe48f3c0fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55c06ef2-c946-45bb-9edc-5a0ad5e3aff3",
                "a5600ebe-66dc-4fcd-b0a1-12c51c41b47a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0699f1f-eeeb-44c3-9495-40a9a4af9241",
              "title": "blueprint",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/List.test.ts",
              "file": "/packages/noodl-ui/src/__tests__/List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should attach listId and iteratorVar deeply to all children in its family tree",
                  "fullTitle": "List blueprint should attach listId and iteratorVar deeply to all children in its family tree",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const noodlComponent = mockData_1.mock.raw.getNOODLList();\nconst component = new List_1.default(noodlComponent);\nconst blueprint = component.getBlueprint();\nlet count = 0;\nconst encounters = [];\nnoodl_1.forEachDeepChildren(blueprint, (child) => {\n    chai_1.expect(child.listId).to.equal(component.listId);\n    count++;\n    encounters.push(child);\n});\nchai_1.expect(encounters.length).to.equal(count);\nlodash_1.default.forEach(encounters, (enc) => {\n    chai_1.expect(enc.listId).to.equal(blueprint.listId);\n});",
                  "err": {},
                  "uuid": "d0fa70a9-874b-4383-bf9d-79b5bb2f5bda",
                  "parentUUID": "f0699f1f-eeeb-44c3-9495-40a9a4af9241",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0fa70a9-874b-4383-bf9d-79b5bb2f5bda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c605a4d-13fd-4c5f-9a29-d930c99dbda9",
              "title": "retrieving dataObjects from list item children",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/List.test.ts",
              "file": "/packages/noodl-ui/src/__tests__/List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to retrieve a data object for a list item using the child instance",
                  "fullTitle": "List retrieving dataObjects from list item children should be able to retrieve a data object for a list item using the child instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "e9d7d8f1-746b-4c1a-a60d-210944732345",
                  "parentUUID": "5c605a4d-13fd-4c5f-9a29-d930c99dbda9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to retrieve a data object for a list item using the child id",
                  "fullTitle": "List retrieving dataObjects from list item children should be able to retrieve a data object for a list item using the child id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0180ab54-3e5f-4531-8eef-ecdc1d14cc11",
                  "parentUUID": "5c605a4d-13fd-4c5f-9a29-d930c99dbda9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to retrieve a data object for a list item using the index position",
                  "fullTitle": "List retrieving dataObjects from list item children should be able to retrieve a data object for a list item using the index position",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c4110949-2598-498f-8e98-a1f78052338b",
                  "parentUUID": "5c605a4d-13fd-4c5f-9a29-d930c99dbda9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return dataObjects from list item children",
                  "fullTitle": "List retrieving dataObjects from list item children should return dataObjects from list item children",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "21a5f916-a221-492b-b693-ec0ed61229e4",
                  "parentUUID": "5c605a4d-13fd-4c5f-9a29-d930c99dbda9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "e9d7d8f1-746b-4c1a-a60d-210944732345",
                "0180ab54-3e5f-4531-8eef-ecdc1d14cc11",
                "c4110949-2598-498f-8e98-a1f78052338b",
                "21a5f916-a221-492b-b693-ec0ed61229e4"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47e1c566-c948-4382-82b4-577f14fcc89e",
              "title": "setting listObject",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/List.test.ts",
              "file": "/packages/noodl-ui/src/__tests__/List.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have a data object assign to every child ",
                  "fullTitle": "List setting listObject should have a data object assign to every child ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "126aee0e-cf7a-4f1f-b975-53c773f5202a",
                  "parentUUID": "47e1c566-c948-4382-82b4-577f14fcc89e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have created list item components for additional data objects",
                  "fullTitle": "List setting listObject should have created list item components for additional data objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "55d11a1c-22e9-4556-86d1-2a95d914ad7f",
                  "parentUUID": "47e1c566-c948-4382-82b4-577f14fcc89e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have removed list item components to match the length of the new listObject",
                  "fullTitle": "List setting listObject should have removed list item components to match the length of the new listObject",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8fa70221-21f3-4bee-8244-fc6b635ab79e",
                  "parentUUID": "47e1c566-c948-4382-82b4-577f14fcc89e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should refresh all of its children's data object to align the order of the list data",
                  "fullTitle": "List setting listObject should refresh all of its children's data object to align the order of the list data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4a8be397-4e5e-4e5e-b700-b2eba367d6c2",
                  "parentUUID": "47e1c566-c948-4382-82b4-577f14fcc89e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "126aee0e-cf7a-4f1f-b975-53c773f5202a",
                "55d11a1c-22e9-4556-86d1-2a95d914ad7f",
                "8fa70221-21f3-4bee-8244-fc6b635ab79e",
                "4a8be397-4e5e-4e5e-b700-b2eba367d6c2"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "a6581923-c150-4d6a-9dea-eb86304e14f7"
          ],
          "failures": [],
          "pending": [
            "3ff28ba4-a29a-4d91-bf2c-411c43e992b8",
            "5b0eb8e8-157c-4195-83e0-8feda523f147"
          ],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}