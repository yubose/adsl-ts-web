{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2020-10-30T06:18:46.860Z",
    "end": "2020-10-30T06:18:46.865Z",
    "duration": 5,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ec5b616b-57ed-4f72-a87c-d7fba578a422",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 2,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.clear();\nlogsnap_1.default.disable();\n// Silence all the logging from our custom logger\n// Logger.create = sinon.stub().callsFake(() =>\n//   _.reduce(\n//     _.keys(_color),\n//     (acc: any, color) => {\n//       acc[color] = _.noop\n//       return acc\n//     },\n//     {},\n//   ),\n// )\ntry {\n    logSpy = sinon_1.default.stub(global.console, 'log').callsFake(() => lodash_1.default.noop);\n    // logsnapSpy = sinon.stub(Logger, 'create').callsFake(() => _.noop as any)\n}\ncatch (error) { }",
          "err": {},
          "uuid": "192c6f4f-d8eb-4d92-af31-b72634df1c99",
          "parentUUID": "ec5b616b-57ed-4f72-a87c-d7fba578a422",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "test_utils_1.noodlui.cleanup();",
          "err": {},
          "uuid": "44d1675f-10c4-47e9-a0b7-ffb21791cf4b",
          "parentUUID": "ec5b616b-57ed-4f72-a87c-d7fba578a422",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var _a;\n(_a = logSpy === null || logSpy === void 0 ? void 0 : logSpy.restore) === null || _a === void 0 ? void 0 : _a.call(logSpy);\n// logsnapSpy?.restore?.()",
          "err": {},
          "uuid": "664e8856-cdee-4454-b15d-938489da868b",
          "parentUUID": "ec5b616b-57ed-4f72-a87c-d7fba578a422",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "document.body.textContent = '';",
          "err": {},
          "uuid": "0d49310e-df74-4539-a969-af72ccb808bf",
          "parentUUID": "ec5b616b-57ed-4f72-a87c-d7fba578a422",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "94f0cae7-edde-4149-9323-13b8513bc13a",
          "title": "hello",
          "fullFile": "C:\\Users\\Chris\\aitmed-noodl-web\\packages\\noodl-ui\\src\\resolvers\\__tests__\\_internal\\handleList.test.ts",
          "file": "\\packages\\noodl-ui\\src\\resolvers\\__tests__\\_internal\\handleList.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "",
              "fullTitle": "hello ",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "throw new Error('fsa');",
              "err": {
                "message": "Error: fsa",
                "estack": "Error: fsa\n    at Context.<anonymous> (packages\\noodl-ui\\src\\resolvers\\__tests__\\_internal\\handleList.test.ts:5:15)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": null
              },
              "uuid": "0bde8af6-9c64-4ebd-9bb3-c78548e5d800",
              "parentUUID": "94f0cae7-edde-4149-9323-13b8513bc13a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0bde8af6-9c64-4ebd-9bb3-c78548e5d800"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}