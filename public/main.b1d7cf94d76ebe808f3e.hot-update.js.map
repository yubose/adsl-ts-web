{"version":3,"file":"main.b1d7cf94d76ebe808f3e.hot-update.js","mappings":"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","sources":["webpack://aitmed-noodl-web/./src/piBackgroundWorker.ts","webpack://aitmed-noodl-web/webpack/runtime/getFullHash"],"sourcesContent":["/**\n * This file is in a separate bundle (not with the web app).\n * Read API: https://developer.mozilla.org/en-US/docs/Web/API/Worker\n *\n * webpack.config.js first transpiles this file and sends it to the /public dir as `piWorker.js`\n *\n * The web app imports this file via `new Worker('piWorker.js')`\n */\n/// <reference lib=\"WebWorker\" />\nimportScripts('https://cdn.jsdelivr.net/npm/jsstore/dist/jsstore.worker.min.js')\nimportScripts('https://cdn.jsdelivr.net/npm/jsstore/dist/jsstore.min.js')\nimportScripts('https://cdn.jsdelivr.net/npm/jsbi@3.1.0/dist/jsbi-umd.js')\nimport type IDB from 'idb'\nimport type _JSBI from 'jsbi/jsbi'\nimport type * as jss from 'jsstore'\nimport SqlWeb from 'sqlweb'\nimport { Worker as PiWorker } from 'noodl-pi'\n\ndeclare global {\n  export const ipb: typeof IDB\n  export const JsStore: typeof import('jsstore')\n}\n\nlet _self = self as DedicatedWorkerGlobalScope\nlet _color = 'hotpink'\nlet _tag = '[piBackgroundWorker]'\n\nconst dataType = JsStore.DATA_TYPE\n\nconst connection = new JsStore.Connection(\n  new Worker('jsstoreWorker.min.js'),\n) as jss.Connection & {\n  $sql: { run: (query: string) => Promise<void> }\n}\n\n// Injects the SQL plugin to support the native SQL query syntax\nconnection.addPlugin(SqlWeb)\n\nconnection.on(JsStore.EVENT.Create, function () {\n  console.log(`%c${_tag} Create`, `color:${_color}`, arguments[0])\n})\n\nconnection.on(JsStore.EVENT.Open, function () {\n  console.log(`%c${_tag} Open`, `color:${_color}`, arguments[0])\n})\n\nconnection.on(JsStore.EVENT.RequestQueueEmpty, function () {\n  console.log(`%c${_tag} RequestQueueEmpty`, `color:${_color}`, arguments[0])\n})\n\nconnection.on(JsStore.EVENT.RequestQueueFilled, function () {\n  console.log(`%c${_tag} RequestQueueFilled`, `color:${_color}`, arguments[0])\n})\n\nconnection.on(JsStore.EVENT.Upgrade, function () {\n  console.log(`%c${_tag} Upgrade`, `color:${_color}`, arguments[0])\n})\n\nconnection\n  .initDb({\n    name: 'noodl',\n    version: 2,\n    tables: [\n      {\n        name: 'version',\n        columns: {\n          // table: { dataType: dataType.String },\n          // value: { dataType: dataType.String },\n        },\n      },\n      {\n        name: 'CPT',\n        columns: {\n          version: { dataType: dataType.String },\n          content: { dataType: dataType.Object },\n        },\n      },\n      {\n        name: 'CPTMod',\n        columns: {\n          version: { dataType: dataType.String },\n          content: { dataType: dataType.Object },\n        },\n      },\n      {\n        name: 'ecos_doc_table',\n        columns: {\n          ctime: { dataType: dataType.Number },\n          mtime: { dataType: dataType.Number },\n          atime: { dataType: dataType.Number },\n          atimes: { dataType: dataType.Number },\n          id: { dataType: dataType.String, notNull: true, primaryKey: true },\n          name: { dataType: dataType.String },\n          deat: { dataType: dataType.String },\n          size: { dataType: dataType.Number },\n          fid: { dataType: dataType.String },\n          eid: { dataType: dataType.String },\n          bsig: { dataType: dataType.String },\n          esig: { dataType: dataType.String },\n          subtype: { dataType: dataType.Number },\n          type: { dataType: dataType.Number },\n          tage: { dataType: dataType.Number },\n        },\n      },\n      {\n        name: 'index_tables',\n        columns: {\n          fkey: { dataType: dataType.Number },\n          kText: { dataType: dataType.String },\n          docId: { dataType: dataType.String },\n          docType: { dataType: dataType.Number },\n          score: { dataType: dataType.Number },\n        },\n      },\n      {\n        name: 'api_hash_table',\n        columns: {\n          api_input_hash: { dataType: dataType.String },\n          resultId: { dataType: dataType.String },\n        },\n      },\n    ],\n  })\n  .then(async () => {\n    const pi = new PiWorker('noodl', connection.$sql.run)\n    // await connection.insert({\n    //   into: 'version',\n    //   values: ['CPT', '1.0.3'],\n    // })\n    // await connection.update({\n    //   in: 'version',\n    //   set: {\n    //     value: '1.0.3',\n    //   },\n    //   where: {\n    //     table: 'CPT',\n    //   },\n    // })\n\n    // await pi.runSql(`INSERT into version values (table = CPT, value = 1.0.3);`)\n    // await connection.set('version', { table: 'CPT', value: '1.0.5' })\n    await connection.insert({\n      into: 'version',\n      values: [{ table: 'CPT', value: '1.0.5' }],\n    })\n\n    // const res = await pi.runSql(`SELECT from `)\n    // console.log(`%c${_tag} SELECT * from version`, `color:${_color}`, res)\n\n    pi.use({\n      all(evtName, ...args) {\n        console.log(`%c${_tag} ${evtName}`, `color:${_color};`, args)\n      },\n      async message(evt) {\n        const data = evt.data\n        const type = data?.type\n\n        console.log(`%c${_tag} Message \"${type}\"`, `color:${_color};`, data)\n\n        switch (type) {\n          case 'storeData': {\n            const { table, data: dataToStore } = data\n            // return connection.insert({\n            //   into: table,\n            //   values: dataToStore,\n            // })\n            break\n          }\n          case 'search': {\n            const { table, query } = data\n            switch (table) {\n              case 'CPT': {\n                if (!query) {\n                  const resp = await _self.fetch(`http://127.0.0.1:3000/cpt`)\n                  const respData = await resp.json()\n                  const version = respData?.CPT?.version\n                  const content = respData?.CPT?.content\n                  // await connection.set('CPT', respData?.CPT)\n                  // await connection.insert({\n                  //   into: 'CPT',\n                  //   values: [version, content],\n                  // })\n                  // await connection.update({\n                  //   in: 'CPT',\n                  //   set: {\n                  //     version,\n                  //     content,\n                  //   },\n                  // })\n\n                  // await connection.set('content', cptCodes)\n                  return pi.sendMessage({\n                    type: 'searchResult',\n                    query,\n                    result: content,\n                    table,\n                  })\n                }\n              }\n            }\n          }\n          case 'get':\n          case 'delete':\n          case 'update': {\n            return pi.emit(type, data)\n          }\n        }\n      },\n      messageError(evt) {\n        console.log(`%c${_tag} messageError`, `color: ${_color}`, evt)\n      },\n      rejectionHandled(evt) {\n        console.log(`%c${_tag} rejectionHandled`, `color: ${_color}`, evt)\n      },\n      rejectionUnhandled(evt) {\n        console.log(`%c${_tag} rejectionUnhandled`, `color: ${_color}`, evt)\n      },\n    })\n\n    return pi.sendMessage({ type: 'workerInitiated' })\n  })\n  .catch((error) => {\n    console.error(error)\n  })\n","__webpack_require__.h = () => (\"79af49eecb4bb94df73e\")"],"names":[],"sourceRoot":""}