{
  "stats": {
    "suites": 8,
    "tests": 18,
    "passes": 11,
    "pending": 6,
    "failures": 1,
    "start": "2020-11-14T20:14:29.427Z",
    "end": "2020-11-14T20:14:29.445Z",
    "duration": 18,
    "testsRegistered": 18,
    "passPercent": 91.66666666666666,
    "pendingPercent": 33.33333333333333,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2f07b9c4-8430-4831-9918-9e34d31e183e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "test_utils_1.noodlui.init();\nconsole.clear();\nlogsnap_1.default.disable();\nlogsnap_1.default.create = () => Object.assign({\n    func() {\n        return this;\n    },\n    log() {\n        return this;\n    },\n}, lodash_1.default.reduce(lodash_1.default.keys(logsnap_1._color), (acc, key) => lodash_1.default.assign(acc, { [key]: lodash_1.default.noop }), {}));\ntry {\n    logSpy = sinon_1.default.stub(global.console, 'log').callsFake(() => lodash_1.default.noop);\n}\ncatch (error) { }",
          "err": {},
          "uuid": "b31a48a2-07bd-42bb-a597-fb654890b4e7",
          "parentUUID": "2f07b9c4-8430-4831-9918-9e34d31e183e",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "actions = [popUpDismissAction, updateObjectAction, pageJumpAction];\nactionChain = new ActionChain_1.default(actions, {});",
          "err": {},
          "uuid": "7db6b14d-071c-4240-8b42-e157f52ead85",
          "parentUUID": "2f07b9c4-8430-4831-9918-9e34d31e183e",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var _a;\n(_a = logSpy === null || logSpy === void 0 ? void 0 : logSpy.restore) === null || _a === void 0 ? void 0 : _a.call(logSpy);",
          "err": {},
          "uuid": "f14e6c6a-8c9b-4d35-9390-59e5f62163d8",
          "parentUUID": "2f07b9c4-8430-4831-9918-9e34d31e183e",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "document.body.textContent = '';\ntest_utils_1.noodlui.cleanup();",
          "err": {},
          "uuid": "47f1700e-ca20-45fd-a71d-3ee24bd4119c",
          "parentUUID": "2f07b9c4-8430-4831-9918-9e34d31e183e",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "1aca0c30-a0d3-40c6-8dad-caf38b9f1250",
          "title": "ActionChain",
          "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/ActionChain.test.ts",
          "file": "/src/__tests__/ActionChain.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update the \"status\" property when starting the action chain",
              "fullTitle": "ActionChain should update the \"status\" property when starting the action chain",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actionChain = new ActionChain_1.default([pageJumpAction], {});\nconst btn = document.createElement('button');\nbtn.addEventListener('click', async (args) => {\n    const fn = actionChain.build({ parser });\n    await fn(args);\n    return chai_1.expect(actionChain.status).to.eq('done');\n});\nchai_1.expect(actionChain.status).to.equal(null);\nbtn.click();\nchai_1.expect(actionChain.status).to.equal('in.progress');",
              "err": {},
              "uuid": "21a712f5-69d7-44ac-adec-355a85fcd339",
              "parentUUID": "1aca0c30-a0d3-40c6-8dad-caf38b9f1250",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "the status should be an object with an \"aborted\" property after explicitly calling \"abort\"",
              "fullTitle": "ActionChain the status should be an object with an \"aborted\" property after explicitly calling \"abort\"",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "450916da-a387-41c5-9955-29c374b76dab",
              "parentUUID": "1aca0c30-a0d3-40c6-8dad-caf38b9f1250",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calling abort should reset the queue",
              "fullTitle": "ActionChain calling abort should reset the queue",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0bd2bf61-edf2-4e84-bd70-41a89ebc837b",
              "parentUUID": "1aca0c30-a0d3-40c6-8dad-caf38b9f1250",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "skipped actions should have the status \"aborted\" with some \"unregistered callback\" reason",
              "fullTitle": "ActionChain skipped actions should have the status \"aborted\" with some \"unregistered callback\" reason",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b82f64d2-a92d-4bf4-82d9-6b0644562f86",
              "parentUUID": "1aca0c30-a0d3-40c6-8dad-caf38b9f1250",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "75132384-9cf6-440a-9224-1bd26813a48c",
              "title": "when adding actions",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/ActionChain.test.ts",
              "file": "/src/__tests__/ActionChain.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should set the builtIns either by using a single object or an array",
                  "fullTitle": "ActionChain when adding actions should set the builtIns either by using a single object or an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockBuiltInFn = sinon_1.default.spy();\nactionChain = new ActionChain_1.default(actions, {});\nchai_1.expect(actionChain.fns.builtIn).not.to.have.property('hello');\nchai_1.expect(actionChain.fns.builtIn).not.to.have.property('hi');\nchai_1.expect(actionChain.fns.builtIn).not.to.have.property('monster');\nchai_1.expect(actionChain.fns.builtIn).not.to.have.property('dopple');\nactionChain.useBuiltIn({ funcName: 'hello', fn: mockBuiltInFn });\nchai_1.expect(actionChain.fns.builtIn)\n    .to.have.property('hello')\n    .that.includes(mockBuiltInFn);\nactionChain.useBuiltIn({ funcName: 'lion', fn: [mockBuiltInFn] });\nchai_1.expect(actionChain.fns.builtIn)\n    .to.have.property('lion')\n    .that.includes(mockBuiltInFn);\nactionChain.useBuiltIn([{ funcName: 'hi', fn: mockBuiltInFn }]);\nchai_1.expect(actionChain.fns.builtIn)\n    .to.have.property('hi')\n    .that.includes(mockBuiltInFn);\nactionChain.useBuiltIn([\n    {\n        funcName: 'monster',\n        fn: [mockBuiltInFn, mockBuiltInFn, mockBuiltInFn],\n    },\n]);\nchai_1.expect(actionChain.fns.builtIn)\n    .to.have.property('monster')\n    .that.is.an('array')\n    .that.includes(mockBuiltInFn)\n    .with.lengthOf(3);",
                  "err": {},
                  "uuid": "4246abb4-f876-4762-8e9f-f6b6cfd2f578",
                  "parentUUID": "75132384-9cf6-440a-9224-1bd26813a48c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set the actions",
                  "fullTitle": "ActionChain when adding actions should set the actions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actionChain = new ActionChain_1.default(actions, {});\nconst popup = sinon_1.default.spy();\nconst update = sinon_1.default.spy();\nconst popupObj = { actionType: 'popUp', fn: [popup] };\nconst updateObj = { actionType: 'updateObject', fn: update };\nactionChain.useAction(popupObj);\nactionChain.useAction([updateObj]);\nchai_1.expect(actionChain.fns.action).to.have.property('popUp');\nchai_1.expect(actionChain.fns.action.popUp)\n    .to.be.an('array')\n    .that.includes(popup);\nchai_1.expect(actionChain.fns.action.updateObject).to.have.lengthOf(1);\nchai_1.expect(actionChain.fns.action).to.have.property('updateObject');\nchai_1.expect(actionChain.fns.action.updateObject)\n    .to.be.an('array')\n    .that.includes(update);\nchai_1.expect(actionChain.fns.action.updateObject).to.have.lengthOf(1);",
                  "err": {},
                  "uuid": "f2bb0553-1ad4-4704-ab2e-00466822e1d7",
                  "parentUUID": "75132384-9cf6-440a-9224-1bd26813a48c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should forward the built ins to useBuiltIn if any builtIn objects were passed in",
                  "fullTitle": "ActionChain when adding actions should forward the built ins to useBuiltIn if any builtIn objects were passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5e0c8e64-340b-475a-9507-b73a83ec88bd",
                  "parentUUID": "75132384-9cf6-440a-9224-1bd26813a48c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4246abb4-f876-4762-8e9f-f6b6cfd2f578",
                "f2bb0553-1ad4-4704-ab2e-00466822e1d7"
              ],
              "failures": [],
              "pending": [
                "5e0c8e64-340b-475a-9507-b73a83ec88bd"
              ],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e6bdd70-d778-443c-9e0f-f6c54008a67d",
              "title": "when creating actions",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/ActionChain.test.ts",
              "file": "/src/__tests__/ActionChain.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an action instance when registering builtIn objects",
                  "fullTitle": "ActionChain when creating actions should return an action instance when registering builtIn objects",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(actionChain.createAction({ actionType: 'builtIn', funcName: 'hello' })).to.be.instanceOf(Action_1.default);",
                  "err": {},
                  "uuid": "4b44eb34-0836-4e5c-aa68-0132e03a7840",
                  "parentUUID": "8e6bdd70-d778-443c-9e0f-f6c54008a67d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an action instance when registering custom objects (non builtIns)",
                  "fullTitle": "ActionChain when creating actions should return an action instance when registering custom objects (non builtIns)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(actionChain.createAction({\n    actionType: 'pageJump',\n    destination: 'hello',\n})).to.be.instanceOf(Action_1.default);",
                  "err": {},
                  "uuid": "9f48ea81-337e-48a3-9522-371430af186f",
                  "parentUUID": "8e6bdd70-d778-443c-9e0f-f6c54008a67d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b44eb34-0836-4e5c-aa68-0132e03a7840",
                "9f48ea81-337e-48a3-9522-371430af186f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "553a3c01-15b6-4313-87ca-d8281e81bf2b",
              "title": "when running actions",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/ActionChain.test.ts",
              "file": "/src/__tests__/ActionChain.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should call the builtIn funcs that were registered by their funcName when being run",
                  "fullTitle": "ActionChain when running actions should call the builtIn funcs that were registered by their funcName when being run",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actionChain = new ActionChain_1.default([...actions, { actionType: 'builtIn', funcName: 'red' }], {});\nconst spy = sinon_1.default.spy();\nactionChain.useBuiltIn({ funcName: 'red', fn: spy });\nconst func = actionChain.build({});\nawait func();\nchai_1.expect(spy.called).to.be.true;",
                  "err": {},
                  "uuid": "9bd0f45f-a217-4244-aa59-f65a3f3e86ab",
                  "parentUUID": "553a3c01-15b6-4313-87ca-d8281e81bf2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should call the non-builtIn funcs that were registered by actionType when being run",
                  "fullTitle": "ActionChain when running actions should call the non-builtIn funcs that were registered by actionType when being run",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actionChain = new ActionChain_1.default(actions, {});\nconst spy = sinon_1.default.spy();\nactionChain.useAction({ actionType: 'popUpDismiss', fn: spy });\nconst func = actionChain.build({});\nawait func();\nchai_1.expect(spy.called).to.be.true;",
                  "err": {},
                  "uuid": "296166fe-22be-48e4-81cd-f62af5a6ef36",
                  "parentUUID": "553a3c01-15b6-4313-87ca-d8281e81bf2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass in the anonymous func into the anonymous action callback",
                  "fullTitle": "ActionChain when running actions should pass in the anonymous func into the anonymous action callback",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const spy = sinon_1.default.spy();\nconst component = new List_1.default();\nconst actionChain = new ActionChain_1.default([pageJumpAction, { actionType: 'anonymous', fn: spy }], { component });\nconst execute = actionChain.build({ trigger: 'onClick' });\nawait execute();\nchai_1.expect(spy.firstCall.args[0].original)\n    .to.have.property('fn')\n    .that.is.a('function');",
                  "err": {},
                  "uuid": "10454056-0051-4245-9ad4-224609a2f7cf",
                  "parentUUID": "553a3c01-15b6-4313-87ca-d8281e81bf2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should receive the component in callback options",
                  "fullTitle": "ActionChain when running actions should receive the component in callback options",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const spy = sinon_1.default.spy();\nconst component = new List_1.default();\nconst actionChain = new ActionChain_1.default([{ actionType: 'anonymous', fn: spy }], { component });\nconst execute = actionChain.build({\n    context: {},\n    trigger: 'onClick',\n});\nawait execute({});\nchai_1.expect(spy.called).to.be.true;\nchai_1.expect(spy.firstCall.args[1])\n    .to.have.property('component')\n    .that.is.equal(component);",
                  "err": {},
                  "uuid": "d1fcae96-005f-44dc-aa55-12bea326ce31",
                  "parentUUID": "553a3c01-15b6-4313-87ca-d8281e81bf2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bd0f45f-a217-4244-aa59-f65a3f3e86ab",
                "296166fe-22be-48e4-81cd-f62af5a6ef36",
                "10454056-0051-4245-9ad4-224609a2f7cf",
                "d1fcae96-005f-44dc-aa55-12bea326ce31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4179d9da-7ddd-48cb-977f-002f9bba36f9",
              "title": "when calling an action's 'execute' method",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/ActionChain.test.ts",
              "file": "/src/__tests__/ActionChain.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass the component instance to args",
                  "fullTitle": "ActionChain when calling an action's 'execute' method should pass the component instance to args",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const spy = sinon_1.default.spy();\ntest_utils_1.noodlui.use({ actionType: 'anonymous', fn: spy });\nconst component = new List_1.default();\nconst actionChain = new ActionChain_1.default([spy], { component });\nawait actionChain.build({})({});\nchai_1.expect(spy.firstCall.args[1])\n    .to.have.property('component')\n    .that.is.eq(component);",
                  "err": {},
                  "uuid": "6fc68aba-30b2-495b-b2fb-b543bec7db36",
                  "parentUUID": "4179d9da-7ddd-48cb-977f-002f9bba36f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "bbc9560a-a01e-46aa-96b8-074b162bacca",
                  "title": "if the caller returned an object",
                  "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/ActionChain.test.ts",
                  "file": "/src/__tests__/ActionChain.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should inject the result to the beginning of the queue if the result is an action noodl object",
                      "fullTitle": "ActionChain when calling an action's 'execute' method if the caller returned an object should inject the result to the beginning of the queue if the result is an action noodl object",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "3fa66f4c-e161-4928-b44f-8e5b7cc82702",
                      "parentUUID": "bbc9560a-a01e-46aa-96b8-074b162bacca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should add the object to the \"intermediary\" list if the returned result was an action noodl object",
                      "fullTitle": "ActionChain when calling an action's 'execute' method if the caller returned an object should add the object to the \"intermediary\" list if the returned result was an action noodl object",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "780969d9-6f45-4c63-b8d5-59c6b3713ba6",
                      "parentUUID": "bbc9560a-a01e-46aa-96b8-074b162bacca",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "3fa66f4c-e161-4928-b44f-8e5b7cc82702",
                    "780969d9-6f45-4c63-b8d5-59c6b3713ba6"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "3b21a12d-1055-4426-ae6a-ac91d49bf132",
                  "title": "when executing emit actions",
                  "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/ActionChain.test.ts",
                  "file": "/src/__tests__/ActionChain.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should pass iteratorVar, listItem, and dataObject to args",
                      "fullTitle": "ActionChain when calling an action's 'execute' method when executing emit actions should pass iteratorVar, listItem, and dataObject to args",
                      "timedOut": false,
                      "duration": 5,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "var _a;\nconst spy = sinon_1.default.spy();\ntest_utils_1.noodlui.use({ actionType: 'emit', fn: spy });\nconst iteratorVar = 'hello';\nconst viewTag = 'pastMedicalHistoryTag';\nconst noodlList = {\n    type: 'list',\n    listObject: [{ key: 'Gender', value: '' }],\n    iteratorVar,\n    contentType: 'list',\n    children: [],\n};\nconst noodlListItem = {\n    type: 'listItem',\n    [iteratorVar]: '',\n    viewTag,\n    children: [\n        helpers.createImageComponent({\n            path: helpers.createIfObject({\n                '.builtIn.object.has': [\n                    { object: '..formData' },\n                    { key: `${iteratorVar}.key` },\n                ],\n            }, 'selectOn.png', 'selectOff.png'),\n            onClick: [\n                helpers.getEmitObject({ iteratorVar }),\n                helpers.getRedrawBuiltInObject({ viewTag }),\n            ],\n        }),\n    ],\n};\nnoodlList.children.push(noodlListItem);\nconst list = test_utils_1.noodlui.resolveComponents(noodlList);\nconst listItem = list.child();\nconst image = listItem === null || listItem === void 0 ? void 0 : listItem.child();\nconst actionChain = new ActionChain_1.default(noodlListItem.children[0].onClick, {\n    component: image,\n});\nconst execute = actionChain.build({ trigger: 'onClick' });\nawait execute({});\nconsole.info(noodlListItem.children[0].onClick);\nconsole.info(spy.called);\nconst args = ((_a = spy.firstCall) === null || _a === void 0 ? void 0 : _a.args[1]) || {};\nchai_1.expect(args).to.have.property('iteratorVar', iteratorVar);\nchai_1.expect(args).to.have.property('listItem', listItem);\nchai_1.expect(args).to.have.property('dataObject', listItem.getDataObject());\nchai_1.expect(args).to.have.property('dataObject', noodlList.listObject[0]);",
                      "err": {
                        "message": "AssertionError: expected {} to have property 'iteratorVar'",
                        "estack": "AssertionError: expected {} to have property 'iteratorVar'\n    at Context.<anonymous> (src/__tests__/ActionChain.test.ts:279:45)",
                        "diff": null
                      },
                      "uuid": "d6ea7f1d-c6d4-470c-a097-d1dced8bcf85",
                      "parentUUID": "3b21a12d-1055-4426-ae6a-ac91d49bf132",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "d6ea7f1d-c6d4-470c-a097-d1dced8bcf85"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "6fc68aba-30b2-495b-b2fb-b543bec7db36"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c2151e7-9bd5-4de4-a593-9e373dc9c430",
              "title": "when action chains finish",
              "fullFile": "/Users/christ/aitmed-noodl-web/packages/noodl-ui/src/__tests__/ActionChain.test.ts",
              "file": "/src/__tests__/ActionChain.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should refresh after done running",
                  "fullTitle": "ActionChain when action chains finish should refresh after done running",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst spy = sinon_1.default.spy();\nconst actionChain = new ActionChain_1.default([pageJumpAction], {});\nconst onClick = actionChain\n    .useAction([{ actionType: 'pageJump', fn: spy }])\n    .build({});\nawait onClick({});\nconst refreshedAction = (_a = actionChain.actions) === null || _a === void 0 ? void 0 : _a[0];\nconst refreshedQueue = actionChain.getQueue();\nchai_1.expect(refreshedAction.status).to.be.null;\nchai_1.expect(refreshedQueue).to.have.lengthOf(1);\nchai_1.expect(refreshedQueue[0].status).to.be.null;\n// expect(refreshedQueue[0].).to.",
                  "err": {},
                  "uuid": "1264e6ab-1092-4ae7-8853-d0a7b60d3081",
                  "parentUUID": "8c2151e7-9bd5-4de4-a593-9e373dc9c430",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1264e6ab-1092-4ae7-8853-d0a7b60d3081"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "21a712f5-69d7-44ac-adec-355a85fcd339"
          ],
          "failures": [],
          "pending": [
            "450916da-a387-41c5-9955-29c374b76dab",
            "0bd2bf61-edf2-4e84-bd70-41a89ebc837b",
            "b82f64d2-a92d-4bf4-82d9-6b0644562f86"
          ],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}