importScripts("https://cdn.jsdelivr.net/npm/jsstore/dist/jsstore.worker.min.js"),importScripts("https://cdn.jsdelivr.net/npm/jsstore/dist/jsstore.min.js"),importScripts("https://cdn.jsdelivr.net/npm/jsbi@3.1.0/dist/jsbi-umd.js");const{Worker:PiWorker}=require("noodl-pi");let _self=self,_color="hotpink",_tag="[piBackgroundWorker]";const dataType=JsStore.DATA_TYPE,connection=new JsStore.Connection(new Worker("jsstoreWorker.min.js"));connection.addPlugin(SqlWeb),connection.on(JsStore.EVENT.Create,(function(){console.log(`%c${_tag} Create`,`color:${_color}`,arguments[0])})),connection.on(JsStore.EVENT.Open,(function(){console.log(`%c${_tag} Open`,`color:${_color}`,arguments[0])})),connection.on(JsStore.EVENT.RequestQueueEmpty,(function(){console.log(`%c${_tag} RequestQueueEmpty`,`color:${_color}`,arguments[0])})),connection.on(JsStore.EVENT.RequestQueueFilled,(function(){console.log(`%c${_tag} RequestQueueFilled`,`color:${_color}`,arguments[0])})),connection.on(JsStore.EVENT.Upgrade,(function(){console.log(`%c${_tag} Upgrade`,`color:${_color}`,arguments[0])})),connection.initDb({name:"noodl",version:2,tables:[{name:"version",columns:{table:{dataType:dataType.String,primaryKey:!0,notNull:!0},value:{dataType:dataType.String}}},{name:"CPT",columns:{version:{dataType:dataType.String},content:{dataType:dataType.Object}}},{name:"CPTMod",columns:{version:{dataType:dataType.String},content:{dataType:dataType.Object}}},{name:"ecos_doc_table",columns:{ctime:{dataType:dataType.Number},mtime:{dataType:dataType.Number},atime:{dataType:dataType.Number},atimes:{dataType:dataType.Number},id:{dataType:dataType.String,notNull:!0,primaryKey:!0},name:{dataType:dataType.String},deat:{dataType:dataType.String},size:{dataType:dataType.Number},fid:{dataType:dataType.String},eid:{dataType:dataType.String},bsig:{dataType:dataType.String},esig:{dataType:dataType.String},subtype:{dataType:dataType.Number},type:{dataType:dataType.Number},tage:{dataType:dataType.Number}}},{name:"index_tables",columns:{fkey:{dataType:dataType.Number},kText:{dataType:dataType.String},docId:{dataType:dataType.String},docType:{dataType:dataType.Number},score:{dataType:dataType.Number}}},{name:"api_hash_table",columns:{api_input_hash:{dataType:dataType.String},resultId:{dataType:dataType.String}}}]}).then((async()=>{const e=new PiWorker("noodl",connection.$sql.run);return e.use({all(e,...t){console.log(`%c${_tag} ${e}`,`color:${_color};`,t)},async message(t){const a=t.data,o=a?.type;switch(console.log(`%c${_tag} Message "${o}"`,`color:${_color};`,a),o){case"storeData":{const{table:e,data:t}=a;break}case"search":{const{table:e,query:t}=a;switch(e){case"CPT":if(!t)break}}case"get":case"delete":case"update":return e.emit(o,a)}},messageError(e){console.log(`%c${_tag} messageError`,`color: ${_color}`,e)},rejectionHandled(e){console.log(`%c${_tag} rejectionHandled`,`color: ${_color}`,e)},rejectionUnhandled(e){console.log(`%c${_tag} rejectionUnhandled`,`color: ${_color}`,e)}}),e.sendMessage({type:"workerInitiated"})})).catch((e=>{console.error(e)}));